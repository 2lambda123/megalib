#!/bin/bash

# Part of the cosima cluster
# Check how many sims can be run on the machine

# Return:
# Positive: number of available simulation slots

# On exit, or if we hit ctrl-C, kill all your children
trap "kill 0" SIGTERM SIGINT EXIT 


commandhelp() {
  echo ""
  echo "dcosima - remotely submit simulations";
  echo "Copyright by Andreas Zoglauer"
  echo ""
  echo "Usage: dcosima [options]";
  echo ""
  echo "Options:"
  echo "  --instances=[number]: The number of instances to use"
  echo "  --source=[filename]: The source file"
  echo "  --zip: Compress the output files."
  echo "  --help: Show this help."
  echo ""
  echo "";
  echo "Example: "
  echo "  dcosima --source=Crab.source";
  echo "";
}


# Store command line as array
CMD=( "$@" )

# Check for help
for C in "${CMD[@]}"; do
  if [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  fi
done


# Default options:
SOURCE=""
INSTANCES="1"
ZIP="FALSE"
CFG=~/.dcosima.cfg


# Overwrite default options with user options:
for C in "${CMD[@]}"; do
  if [[ ${C} == *-s*=* ]]; then
    SOURCE=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-i*=* ]]; then
    INSTANCES=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-z* ]]; then
    ZIP="TRUE"
  elif [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  else
    echo ""
    echo "ERROR: Unknown command line option: ${C}"
    echo "       See \"dcosima --help\" for a list of options"
    exit 1
  fi
done


# Provide feed back and perform error checks:
echo ""
echo "Chosen options:"


if [ "${SOURCE}" != "" ]; then
  echo " * Source file: ${SOURCE}"
else
  echo " "
  echo "ERROR: You need to give source file for simulations"
  commandhelp
  exit 1
fi

if [ ${INSTANCES} -gt 0 ]; then
  echo " * Simulations instances: ${INSTANCES}"
else
  echo " "
  echo "ERROR: You need to set a positive number of instances!"
  commandhelp
  exit 1
fi

if [ -f "${CFG}" ]; then
  echo " * Configuration file: ${CFG}"
else 
  echo " "
  echo "ERROR: You need to have a existing configuration file, the default one should be ~/.dcosima.cfg!"
  commandhelp
  exit 1  
fi

# Read configuration file and extract machines
MACHINES=( `cat ${CFG} | grep "^machine" | gawk '{ print $2 }'` )
REMOTEUSER=( )
REMOTEHOST=( )
REMOTEPORT=( )
ALLOWEDINSTANCES=( )

# Find the master simulation directory
MASTERDIR=( `cat ${CFG} | grep "^directory" | gawk '{ print $2 }'` )
if [[ "${MASTERDIR}" == "" ]]; then
  MASTERDIR="dcosima"
fi
if [[ ${MASTERDIR} == /* ]]; then
  echo "ERROR: The simulation directory can not be an absolute path! Using default path dcosima"
  MASTERDIR="dcosima"
fi
if [[ ${MASTERDIR} == .* ]]; then
  echo "ERROR: The simulation directory must sit in the users main directory! Using default path dcosima"
  MASTERDIR="dcosima"
fi

echo " "
echo "Remote machines setup:"
for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
  REMOTEUSER[$m]=`echo "${MACHINES[$m]}" | awk -F"@" '{ print $1 }'` 
  REMOTEHOST[$m]=`echo "${MACHINES[$m]}" | awk -F"@" '{ print $2 }'  | awk -F":" '{ print $1 }'` 
  REMOTEPORT[$m]=`echo "${MACHINES[$m]}" | awk -F":" '{ print $2 }'`
  echo " * Found remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]})"
  ALLOWEDINSTANCES[$m]=`dcosima-getinstances --remote=${MACHINES[$m]}`
  echo "   --> Allowed instances: ${ALLOWEDINSTANCES[$m]}" 
done

echo " "
echo "Starting runs:"
LAUNCHED=0
AVAILABLE=0
RUNID=${RANDOM}${RANDOM}${RANDOM}

# Make the local directory where we store the data
LOCALDIR="Run_ID${RUNID}"
mkdir ${LOCALDIR}

# Launch an rsync instance
RSYNCCFG=${LOCALDIR}/dcosima-rsync.cfg
dcosima-rsync --dir=${LOCALDIR} &
RSYNCPID=$!

# Launch the runs
while [[ ${LAUNCHED} -lt ${INSTANCES} ]]; do

  echo " " 
    
  STARTED=0
  for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
    ALLOWED=`dcosima-getinstances --remote=${MACHINES[$m]}`
    echo " "
    echo "Preparing for next launch:"
    echo " * Allowed runs on ${MACHINES[$m]}: ${ALLOWED}"
    if [[ ${ALLOWED} -gt 0 ]]; then
      LAUNCHED=$(( ${LAUNCHED} + 1 ))
      echo " * Launching instance ${LAUNCHED} on ${MACHINES[$m]}"
      dcosima-runinstance --source=${SOURCE} --runid=${RUNID} --instanceid=${LAUNCHED} --remote=${MACHINES[$m]} --masterdir=${MASTERDIR} `if [[ ${ZIP} == TRUE ]]; then echo "--zip"; fi`
      STARTED=1
    fi
    if [[ ${LAUNCHED} -eq ${INSTANCES} ]]; then break; fi
  done
  
  if [[ ${STARTED} -eq 0 ]]; then
    echo " * No simulation slots available at the moment... Sleeping a while..."
    sleep 10
  else 
    # Sleep a bit to give the last instance a chance to start before we revisit the node
    sleep 1
  fi
done

# Finish the rsync setup file:
echo "DONE" >> ${RSYNCCFG}

echo " * All processes lauched"
echo ""

echo "Create a concatenation file"
Base=`cat ${SOURCE} | grep -E "\.FileName|\.Filename|\.filename" | awk -F".FileName|.Filename|.filename" '{ print $2 }' | sed 's/^ *//g'`;

# Switch to the directory where all the data lands:
cd Run_ID${RUNID}

echo "Creating concatenation file for simulation \"${Base}\""
ConcatFileName="${Base}.p1.sim" 

# Wait until the first such file is created
while ( test ! -f ${Base}.p1.inc1.id1.sim ); do
  sleep 1
  echo "Waiting for the simulation file \"${Base}.p1.inc1.id1.sim\" to appear ..."
done

# Wait until the header is written
while [ `wc -l ${Base}.p1.inc1.id1.sim | awk -F" " '{ print $1 }'` -le 100 ]; do
  sleep 1;
  echo "Waiting for first 100 lines to be written into the simulation file \"${Base}.p1.inc1.id1.sim\" ..."
done

# Create a concatenation file
echo "Generating concatenation file..."
echo "# Concatenation file generated by mcosima" >> ${ConcatFileName}

head -n 100 ${Base}.p1.inc1.id1.sim > /tmp/mcosima.head
while read LINE
do
  # Keep all information but: #, Seed, TB
  FIRST=${LINE%% *}
  if [ "${FIRST}" == "SE" ]; then
    break
  fi
  if ( [ "${FIRST}" != "#" ] && [ "${FIRST}" != "Seed" ] && [ "${FIRST}" != "TB" ] ); then
    echo "${LINE}" >> ${ConcatFileName}
  fi
done < /tmp/mcosima.head
rm /tmp/mcosima.head

echo " " >> ${ConcatFileName}
    
for (( i=1; i <= ${INSTANCES}; i+=1 )); do
  echo "IN ${Base}.p${ThreadsID}.inc${i}.id1.sim" >> ${ConcatFileName}
done
    
echo "EN" >> ${ConcatFileName}
echo " " >> ${ConcatFileName}

echo "Created concatenation file \"${ConcatFileName}\""


echo " "
echo "Waiting for rsync processes to finish..."
wait ${RSYNCPID}

echo "All processes have finied and all data has been synced. Now deleting the remote data..."
for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
  echo " * Deleting ${MASTERDIR}/Run_ID${RUNID} on ${REMOTEHOST[$m]}"
  ssh -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} "rm -rf ${MASTERDIR}/Run_ID${RUNID};"
done

echo " " 
echo "The simulations have finished!"
echo " "

exit 0;
