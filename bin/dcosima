#!/bin/bash

# Part of the cosima cluster
# Check how many sims can be run on the machine

# Return:
# Positive: number of available simulation slots

# On exit, or if we hit ctrl-C, kill all your children
trap "trap - SIGTERM && kill -- -$$" SIGTERM SIGINT EXIT 


commandhelp() {
  echo ""
  echo "dcosima - remotely submit simulations";
  echo "Copyright by Andreas Zoglauer"
  echo ""
  echo "Usage: dcosima [options]";
  echo ""
  echo "Options:"
  echo "  --instances=[number]: The number of instances to use"
  echo "  --source=[filename]: The source file"
  echo "  --prefix=[name]: A name (prefix) prepended to the output directory"
  echo "  --zip: Compress the output files."
  echo "  --help: Show this help."
  echo ""
  echo "";
  echo "Example: "
  echo "  dcosima --source=Crab.source";
  echo "";
}


# Store command line as array
CMD=( "$@" )

# Check for help
for C in "${CMD[@]}"; do
  if [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  fi
done


# Default options:
SOURCE=""
INSTANCES="1"
PREFIX="Run"
ZIP="FALSE"
CFG=~/.dcosima.cfg


# Overwrite default options with user options:
for C in "${CMD[@]}"; do
  if [[ ${C} == *-s*=* ]]; then
    SOURCE=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-i*=* ]]; then
    INSTANCES=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-p*=* ]]; then
    PREFIX=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-z* ]]; then
    ZIP="TRUE"
  elif [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  else
    echo ""
    echo "ERROR: Unknown command line option: ${C}"
    echo "       See \"dcosima --help\" for a list of options"
    exit 1
  fi
done


# Provide feed back and perform error checks:
echo ""
echo "Chosen options:"


if [ "${SOURCE}" != "" ]; then
  echo " * Source file: ${SOURCE}"
else
  echo " "
  echo "ERROR: You need to give source file for simulations"
  commandhelp
  exit 1
fi

if [ "${PREFIX}" != "" ]; then
  echo " * Prefix to the output directory: ${PREFIX}"
else
  echo " "
  echo "ERROR: You need to give a prefix to the output directory"
  commandhelp
  exit 1
fi

if [ ${INSTANCES} -gt 0 ]; then
  echo " * Simulations instances: ${INSTANCES}"
else
  echo " "
  echo "ERROR: You need to set a positive number of instances!"
  commandhelp
  exit 1
fi

if [ -f "${CFG}" ]; then
  echo " * Configuration file: ${CFG}"
else 
  echo " "
  echo "ERROR: You need to have a existing configuration file, the default one should be ~/.dcosima.cfg!"
  commandhelp
  exit 1  
fi

# The md5 checksum of the configuration file to tell if it changed - initialize empty
CFGMD5=""

echo " "
echo "Starting runs:"
LAUNCHED=0
AVAILABLE=0
RUNID=${RANDOM}${RANDOM}${RANDOM}

# Make the local directory where we store the data
LOCALDIR="${PREFIX}_ID${RUNID}"
mkdir ${LOCALDIR}

# preparation for rsync instance launch
RSYNCCFG=${LOCALDIR}/dcosima-rsync.cfg
RSYNCSTARTED="FALSE"

# Launch the runs
while [[ ${LAUNCHED} -lt ${INSTANCES} ]]; do

  echo " " 

  # (Re-) Read configuration file and extract machines
  if [[ `md5sum ${CFG}` != ${CFGMD5} ]]; then
    echo " "
    echo "Reading remote machines setup:"
    MACHINES=( `cat ${CFG} | grep "^machine" | gawk '{ print $2 }'` )
    PRIORITIES=( `cat ${CFG} | grep "^machine" | gawk '{ print $3 }'` )
   
    if [[ ${#PRIORITIES[*]} < ${#MACHINES[*]} ]]; then
      PRIORITIES=( )
      for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
        PRIORITIES=( ${PRIORITIES[@]} "1" )
      done
    fi
    
    for (( m=0; m<=$(( ${#PRIORITIES[*]} -1 )); m++ )); do
      if (( ${PRIORITIES[$m]} < 1 )); then
        echo "Error: The highest (= smallest number) allowed machine priority is 1"
        echo "       Offender: ${MACHINES[$m]} with ${PRIORITIES[$m]}"
        exit 1
      fi
      if (( ${PRIORITIES[$m]} > 5 )); then
        echo "Error: The lowest (= highest number) allowed machine priority is 5"
        echo "       Offender: ${MACHINES[$m]} with ${PRIORITIES[$m]}"
        exit 1
      fi
    done

    REMOTEUSER=( )
    REMOTEHOST=( )
    REMOTEPORT=( )
    for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
      REMOTEUSER[$m]=`echo "${MACHINES[$m]}" | awk -F"@" '{ print $1 }'` 
      REMOTEHOST[$m]=`echo "${MACHINES[$m]}" | awk -F"@" '{ print $2 }'  | awk -F":" '{ print $1 }'` 
      REMOTEPORT[$m]=`echo "${MACHINES[$m]}" | awk -F":" '{ print $2 }'`
    done
    CFGMD5=`md5sum ${CFG}`
    
    for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}, priority: ${PRIORITIES[$m]} )"
    done
  fi

  
  # Verify the machines:
  AVAILABLEMACHINES=0
  echo " " 
  echo "Verifying available machines: "
  for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
  
    # Do a quick test if the machine is availble:
    REMOTENAME=`ssh -q -o ConnectTimeout=5 -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} "hostname"`
    if [ "$?" != "0" ]; then
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}): NOT ACCESSIBLE"
      MACHINES[$m]=""
      continue
    fi  
      
    # Check that cosima is installed
    AVAILABLE=`ssh -q -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} ". .bash_local; type cosima > /dev/null" 2>&1`
    if [ "${AVAILABLE}" != "" ]; then
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}): Cosima not found!"
      MACHINES[$m]=""
      continue
    fi
 
    # Check if we have a configuration file
    CONFIGFILE=`ssh -q -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} "if [[ ! -f ~/.dcosima.cfg ]]; then echo "NO"; else echo "YES"; fi;"`
    if [ "$?" != "0" ] || [ ${CONFIGFILE} != "YES" ]; then
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}): No dcosima configuration file found! Add one with at least the keywords instances and directory!"
      MACHINES[$m]=""
      continue
    fi
  
    # Check if we have a master directory
    REMOTECOMMAND='COUNT=`grep -c ^directory ~/.dcosima.cfg`; if [ ${COUNT} -eq 1 ]; then grep ^directory ~/.dcosima.cfg; fi;'
    REMOTEMASTERDIR=$(ssh -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} 'bash -s' <<< ${REMOTECOMMAND} )
    if [ "$?" != "0" ]; then
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}): Failed to read master directory!"
      MACHINES[$m]=""
      continue
    fi
    REMOTEMASTERDIR=`echo ${REMOTEMASTERDIR} | awk '{ print $2 }'`
    if [ "${REMOTEMASTERDIR}" == "" ]; then
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}): Failed to read master directory!"
      MACHINES[$m]=""
      continue
    fi
    
    # Check if we have enough disk space free
    DISKSPACE=`ssh -q -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} "cd ${REMOTEMASTERDIR}; df -k . -P -T -BG | tail -n 1"`
    if [ "$?" != "0" ]; then
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}): Unable to determine free disk space!"
      MACHINES[$m]=""
      continue
    fi
    DISKSPACE=$(echo ${DISKSPACE}  | awk '{ print $5 }' | sed 's/.$//' )
    if (( ${DISKSPACE} < 50 )); then
      echo " * Remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]}): Not enough free disk space (free: ${DISKSPACE} GB, required: 50 GB)"
      MACHINES[$m]=""
      continue
    fi

    echo " * Found remote machine: ${REMOTENAME} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]})"  
    AVAILABLEMACHINES=$(( ${AVAILABLEMACHINES} + 1 ))
    
  done
  
  # If we have NO machines available, we quit...
  if [ ${AVAILABLEMACHINES} -eq 0 ]; then
    echo " "
    echo "Unfortunately there are no machines available for simulations... Add a few more! Good bye..."
    exit 0;
  fi
  
  
  STARTED=0
  for P in `seq 1 5`; do
    STARTED=0
    for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
      if [[ ${PRIORITIES[$m]} != ${P} ]]; then continue; fi
    
      # Exclude failed machines
      if [ "${MACHINES[$m]}" == "" ]; then
        continue
      fi
    
      # Prepare the launch
      ALLOWED=`dcosima-getinstances --remote=${MACHINES[$m]}`
      echo " "
      echo "Preparing for next launch:"
      echo " * Allowed runs on ${MACHINES[$m]}: ${ALLOWED}"
      if [[ ${ALLOWED} -gt 0 ]]; then
        LAUNCHED=$(( ${LAUNCHED} + 1 ))
        echo " * Launching instance ${LAUNCHED} on ${MACHINES[$m]}"
        dcosima-runinstance --source=${SOURCE} --rundir=${LOCALDIR} --instanceid=${LAUNCHED} --remote=${MACHINES[$m]} `if [[ ${ZIP} == TRUE ]]; then echo "--zip"; fi`
        STARTED=1
      fi
      if [[ ${LAUNCHED} -eq ${INSTANCES} ]]; then break; fi
      
    done
    # If we start events at this priority we stop and restart --- we want to fill this priority level first
    if (( ${STARTED} > 0 )); then
      break
    fi
  done
  
  
  if [[ ${STARTED} -eq 0 ]]; then
    echo ""
    echo " --> No simulation slots available at the moment... Sleeping for a while..."
    sleep 10
  else 
    # Sleep a bit to give the last instance a chance to start before we revisit the node   
    sleep 1
    # If we have not yet launched the rsync process, do it now
    if [ "${RSYNCSTARTED}" == "FALSE" ]; then
      dcosima-rsync --dir=${LOCALDIR} --instances=${INSTANCES} &
      RSYNCPID=$!
      RSYNCSTARTED="TRUE"
    fi
  fi
done

# Finish the rsync setup file:
echo "DONE" >> ${RSYNCCFG}

echo " * All processes lauched"
echo ""

echo "Create a concatenation file"
Base=`cat ${SOURCE} | grep -E "\.FileName|\.Filename|\.filename" | awk -F".FileName|.Filename|.filename" '{ print $2 }' | sed 's/^ *//g'`;

# Switch to the directory where all the data lands:
cd ${LOCALDIR}

echo "Creating concatenation file for simulation \"${Base}\""
ConcatFileName="${Base}.p1.sim" 

FirstFileName="${Base}.p1.inc1.id1.sim"
if [ "${ZIP}" == "TRUE" ]; then
  FirstFileName="${FirstFileName}.gz"
fi 


# Wait until the first such file is created
while ( test ! -f ${FirstFileName} ); do
  sleep 1
  echo "Waiting for the simulation file \"${FirstFileName}\" to appear ..."
done


# Wait until the header is written and then dump the first 100 lines
if [ ${ZIP} == "TRUE" ]; then
  while [ `gunzip -c ${FirstFileName} 2> /dev/null | wc -l | awk -F" " '{ print $1 }'` -le 100 ]; do
    # Remark: 2> /dev/null suppresses a "unexpected end of file" error message since the file is obviously not yet closed
    sleep 1;
    echo "Waiting for first 100 lines to be written into the simulation file \"${FirstFileName}\" ..."
  done
  gunzip -c ${FirstFileName} 2> /dev/null | head -n 100 > /tmp/mcosima.head
else
  while [ `wc -l ${FirstFileName} | awk -F" " '{ print $1 }'` -le 100 ]; do
    sleep 20;
    echo "Waiting for first 100 lines to be written into the simulation file \"${FirstFileName}\" ..."
  done
  head -n 100 ${FirstFileName} > /tmp/mcosima.head
fi


# Create a concatenation file
echo "Generating concatenation file..."
echo "# Concatenation file generated by mcosima" >> ${ConcatFileName}


while read LINE
do
  # Keep all information but: #, Seed, TB
  FIRST=${LINE%% *}
  if [ "${FIRST}" == "SE" ]; then
    break
  fi
  if ( [ "${FIRST}" != "#" ] && [ "${FIRST}" != "Seed" ] && [ "${FIRST}" != "TB" ] ); then
    echo "${LINE}" >> ${ConcatFileName}
  fi
done < /tmp/mcosima.head
rm /tmp/mcosima.head

echo " " >> ${ConcatFileName}
    
for (( i=1; i <= ${INSTANCES}; i+=1 )); do
  echo "IN ${Base}.p1.inc${i}.id1.sim" >> ${ConcatFileName}
done
    
echo "EN" >> ${ConcatFileName}
echo " " >> ${ConcatFileName}

# Zip the concatenation file if desired
if [[ "${ZIP}" == "TRUE" ]]; then
  gzip ${ConcatFileName}
  ConcatFileName="${ConcatFileName}.gz"
fi

echo "Created concatenation file \"${ConcatFileName}\""


echo " "
echo "Waiting for rsync processes to finish..."
wait ${RSYNCPID}

echo "All processes have finied and all data has been synced. Now deleting the remote data..."
for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
  echo " * Deleting ${REMOTEMASTERDIR}/${LOCALDIR} on ${REMOTEHOST[$m]}"

  REMOTECOMMAND='COUNT=`grep -c ^directory ~/.dcosima.cfg`; if [ ${COUNT} -eq 1 ]; then grep ^directory ~/.dcosima.cfg; fi;'
  REMOTEMASTERDIR=$(ssh -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} 'bash -s' <<< ${REMOTECOMMAND} )
  if [ "$?" != "0" ]; then
    echo "ERROR: Failed to read remote master directory"
    continue
  fi
  REMOTEMASTERDIR=`echo ${REMOTEMASTERDIR} | awk '{ print $2 }'`
  if [ "${REMOTEMASTERDIR}" == "" ]; then
    echo "ERROR: No remote master directory -- cannot delete anything!"
    continue
  fi
 
  ssh -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} "rm -rf ${REMOTEMASTERDIR}/${LOCALDIR};"
done

echo " " 
echo "The simulations have finished!"
echo " "

exit 0;
