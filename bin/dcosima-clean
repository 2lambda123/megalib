#!/bin/bash

# Part of the cosima cluster
# Clean the dcosima directory on ALL remote machines

# Return:
# Positive: number of available simulation slots


commandhelp() {
  echo ""
  echo "dcosima-clean - clean the dcosima directory on the remote machines";
  echo "Copyright by Andreas Zoglauer"
  echo ""
  echo "Usage: dcosima-clean [options]";
  echo ""
  echo "Options:"
  echo "  --help: Show this help."
  echo ""
  echo "";
  echo "Example: "
  echo "  dcosima-clean";
  echo "";
}


# Store command line as array
CMD=( "$@" )

# Check for help
for C in "${CMD[@]}"; do
  if [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  fi
done

# Default options:
CFG=~/.dcosima.cfg
MEGALIBPATH="Science/Software"

# Read configuration file and extract machines
MACHINES=( `cat ${CFG} | grep "^machine" | gawk '{ print $2 }'` )
REMOTEUSER=( )
REMOTEHOST=( )
REMOTEPORT=( )

echo " "
echo "Remote machines setup:"
for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
  REMOTEUSER[$m]=`echo "${MACHINES[$m]}" | awk -F"@" '{ print $1 }'` 
  REMOTEHOST[$m]=`echo "${MACHINES[$m]}" | awk -F"@" '{ print $2 }'  | awk -F":" '{ print $1 }'` 
  REMOTEPORT[$m]=`echo "${MACHINES[$m]}" | awk -F":" '{ print $2 }'`
  echo " * Found remote machine: ${MACHINES[$m]} (user: ${REMOTEUSER[$m]}, address: ${REMOTEHOST[$m]}, port: ${REMOTEPORT[$m]})"
done

# Create the install paths on all machines
for (( m=0; m<=$(( ${#MACHINES[*]} -1 )); m++ )); do
  REMOTECOMMAND='COUNT=`grep -c ^directory ~/.dcosima.cfg`; if [ ${COUNT} -eq 1 ]; then grep ^directory ~/.dcosima.cfg; fi;'
  REMOTEMASTERDIR=$(ssh -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} 'bash -s' <<< ${REMOTECOMMAND} )
  if [ "$?" != "0" ]; then
    echo "ERROR: Failed to read remote master directory"
    continue
  fi
  REMOTEMASTERDIR=`echo ${REMOTEMASTERDIR} | awk '{ print $2 }'`
  if [ "${REMOTEMASTERDIR}" == "" ]; then
    echo "ERROR: Failed to read remote master directory"
    continue
  fi
 
  echo "Cleaning ${REMOTEMASTERDIR} on ${REMOTEUSER[$m]}@${REMOTEHOST[$m]}..."
  ssh -p ${REMOTEPORT[$m]} ${REMOTEUSER[$m]}@${REMOTEHOST[$m]} "if [[ -d ${REMOTEMASTERDIR} ]]; then rm -rf ${REMOTEMASTERDIR}/*_ID*; fi; exit 0;"
done


exit 0
