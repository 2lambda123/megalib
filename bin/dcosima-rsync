#!/bin/bash

# Part of the cosima cluster
# Check how many sims can be run on the machine

# Return:
# Positive: number of available simulation slots


commandhelp() {
  echo ""
  echo "dcosima-rsync - rsync all files back";
  echo "Copyright by Andreas Zoglauer"
  echo ""
  echo "Usage: dcosima-rsync [options]";
  echo ""
  echo "Options:"
  echo "  --directory=[directory name]: The directory where to store the data"
  echo "  --instances=[number]: The number of running indstances, i.e. the number of expected instances"
  echo "  --help: Show this help."
  echo ""
  echo "";
  echo "Example: "
  echo "  dcosima-rsync --dir=Run_ID87236489726";
  echo "";
}


# Store command line as array
CMD=( "$@" )

# Check for help
for C in "${CMD[@]}"; do
  if [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  fi
done


# Default options:
DIRECTORY=""
INSTANCES=0

# Overwrite default options with user options:
for C in "${CMD[@]}"; do
  if [[ ${C} == *-d*=* ]]; then
    DIRECTORY=`echo ${C} | awk -F"=" '{ print $2 }'`
    eval DIRECTORY=${DIRECTORY}
    #DIRECTORY=$(readlink -f ${DIRECTORY})
  elif [[ ${C} == *-i*=* ]]; then
    INSTANCES=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  else
    echo ""
    echo "ERROR: Unknown command line option: ${C}"
    echo "       See \"dcosima-rsync --help\" for a list of options"
    exit 1
  fi
done


# Provide feed back and perform error checks:
echo ""
echo "dcosima-rsync: Chosen options:"

if [ "${DIRECTORY}" == "" ]; then
  echo " "
  echo "ERROR: You need to give a directory"
  exit 1
fi
if [[ ! -d ${DIRECTORY} ]]; then 
  echo " "
  echo "ERROR: The directory must exist"
  exit 1
fi
echo " * Directory: ${DIRECTORY}"

if [ ${INSTANCES} -gt 0 ]; then
  echo " * Simulations instances: ${INSTANCES}"
else
  echo " "
  echo "ERROR: You need to set a positive number of instances!"
  commandhelp
  exit 1
fi

cd ${DIRECTORY}

INITIALWAIT=0
MAXINITIALWAIT=300

LASTWAIT=0
MAXLASTWAIT=120


echo ""
echo "Starting..."

while true; do
  # Sleep .....
  echo "dcosima-rsync: Waiting for 20 seconds for more data to be simulated..." 
  sleep 20
  INITIALWAIT=$((INITIALWAIT + 20))
  LASTWAIT=$((LASTWAIT + 20))
  
  if [ ! -f dcosima-rsync.cfg ]; then
    echo "ERROR: we must have a dcosima-rsync.cfg file. Make sure it exists before you start dcosima-rsync! Terminating!"
    exit 
  fi
  
  # Parse the configuration file
  RSYNCS=( )
  while read LINE; do
    #echo "Line: ${LINE}"
    RSYNCS[${#RSYNCS[*]}]=${LINE}
  done < dcosima-rsync.cfg

  #echo "Found the following rsyncs: ${RSYNCS[@]}"

  # Download data
  MODIFIED=0
  ALLINCLUDED=0
  SUM=0
  NEWSUM=0
  SIMFILECOUNT=`ls -1 *.p*.inc*.id*.sim* 2>/dev/null | wc -l`
  if [ ${SIMFILECOUNT} != 0 ]; then
    SUM=`du -cb *.p*.inc*.id*.sim* | tail -n 1 | awk '{ print $1 }'`
  fi
  for (( m=0; m<=$(( ${#RSYNCS[*]} -1 )); m++ )); do
    #echo "psync: Checking ${RSYNCS[$m]}"
    if [[ ${RSYNCS[$m]} == rsync* ]]; then
      echo "dcosima-rsync: Syncing: ${RSYNCS[$m]}"
      eval ${RSYNCS[$m]}
    elif [[ ${RSYNCS[$m]} == DONE ]]; then
      ALLINCLUDED=1
      break
    else 
      echo "ERROR: Unknown rsync command: ${RSYNCS[$m]}"
    fi  
  done  

  SIMFILECOUNT=`ls -1 *.p*.inc*.id*.sim* 2>/dev/null | wc -l`
  if [ ${SIMFILECOUNT} != 0 ]; then
    NEWSUM=`du -cb *.p*.inc*.id*.sim* | tail -n 1 | awk '{ print $1 }'`
  fi
  
  if [ "${NEWSUM}" == "0" ]; then
    if [ "${INITIALWAIT}" -ge "${MAXINITIALWAIT}" ]; then
      echo "dcosima-rsync: Did not get any data for ${INITIALWAIT} seconds! Terminating!"
      MODIFIED=0
    else
      echo "dcosima-rsync: Did not yet get any data (already waiting ${INITIALWAIT} seconds)... waiting longer..."
      MODIFIED=1
    fi
  else 
    if [ "${NEWSUM}" != "${SUM}" ]; then
      echo "dcosima-rsync: Downloaded more data (file size before: ${SUM} Bytes and after: ${NEWSUM} Bytes)"
      MODIFIED=1
      LASTWAIT=0
    elif [ "${NEWSUM}" == "${SUM}" ]; then
      echo "dcosima-rsync: No new data since ${LASTWAIT} seconds..."
      if [ "${LASTWAIT}" -ge "${MAXLASTWAIT}" ]; then
        echo "dcosima-rsync: No more new data since ${LASTWAIT} seconds! Assuming we are done!"
        MODIFIED=0
      else
        # Check if something is still running - if not do a quick exit:
        RUNNING=`dcosima-listallinstances | grep "Total number of instances" | awk -F/ '{ print $2 }'`; 
        if (( ${RUNNING} == 0 )); then 
          echo "dcosima-rsync: Nothing is running anymore..."
          MODIFIED=0
        else 
          if [ "${SIMFILECOUNT}" == "${INSTANCES}" ]; then
            echo "dcosima-rsync: Waiting for the last file to finish..."
          else
            echo "dcosima-rsync: Waiting for more data (${SIMFILECOUNT} of ${INSTANCES} sim files are here)..."
          fi
          MODIFIED=1
        fi
      fi
    fi
  fi
  
  if [ ${MODIFIED} -eq 0 ] && [ ${ALLINCLUDED} -eq 1 ]; then
    break;
  fi
    
done

chown ${USER}:${USER} *

echo "dcosima-rsync: All rsync processes have finished! Done!"


exit 0;
