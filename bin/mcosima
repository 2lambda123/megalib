#! /bin/bash


help() {
  echo ""
  echo "mcosima - parallel simulation script for cosima on the same machine";
  echo "(C) by Andreas Zoglauer"
  echo "";
  echo "Usage:";
  echo "    mcosima <cosima source file>";
  echo "";
  echo "Options:";
  echo "    -t <threads>:  The number of threads as an integer"
  echo "    -m <threads>:  Maximum number of all threads (e.g. of all mcosima calls) on this machine"
  echo "    -n <nice>:     The nice level as an integer"
  echo "    -z:            zip the simulations files"
  echo "    -e:            Use the given special cosima executable instead" 
  echo "    -w:            If set, wait until all jobs have finished."
  echo "";
  echo "Example:";
  echo "    mcosima -t 2 -n 19 Run.source";
  echo "";
  echo "This script launches multiple instances of cosima with the same source file";
  echo "and generates a concatenation file"
  echo "";
}


# Initialize
Threads=1;
if ( `test -f /usr/sbin/sysctl` ); then
  Threads=`sysctl -n hw.logicalcpu_max`
elif ( `test -f /proc/cpuinfo` ); then 
  Threads=`grep processor /proc/cpuinfo | wc -l`
fi
Source="!@#$";
Max=${Threads}
Nice=0;
Wait="no"
Zip="no"
Executable="cosima"

# Check if executable exists
if (`test -f ${MEGAlib}/bin/${Executable}`); then
  echo " "
  echo "ERROR: The program ${Executable} does not exist. Try to (re-)compile the program"
  echo " "
  exit 1;
fi


# Verify the input:

if [ $# -eq 0 ] ; then
  echo " "
  echo "Error: You need to give at least a source file";
  echo "       For details see mcosima --help"
  echo " "
  exit 0;
fi;

while [ $# -gt 0 ] ; do
  Found=0;
  case $1 in
  -h|--help) 
    help; 
    exit 0;;
  -w|--wait)
    Found=1;
    Wait="yes"
    ;;
  -z|--zip)
    Found=1;
    Zip="yes"
    ;;
  -p|-t)
    shift;
    if [ $# -eq 0 ]; then
      echo " "
      echo "Error: Options -p and -t need an argument";
      echo "       For details see mcosima --help"
      echo " "
      exit 0;
    fi
    Found=1;
    Threads=$1;
    #echo "Using ${Threads} threads";
    ;;
  -m)
    shift;
    if [ $# -eq 0 ]; then
      echo " "
      echo "Error: Options -m needs an argument";
      echo "       For details see mcosima --help"
      echo " "
      exit 0;
    fi
    Found=1;
    Max=$1;
    #echo "Using ${Threads} threads";
    ;;
  -e)
    shift;
    if [ $# -eq 0 ]; then
      echo " "
      echo "Error: Options -e needs an argument";
      echo "       For details see mcosima --help"
      echo " "
      exit 0;
    fi
    Found=1;
    Executable=$1;
    echo "Using executable ${Executable}";
    ;;
  -n)
    shift;
    if [ $# -eq 0 ]; then
      echo " "
      echo "Error: Option -n needs an argument";
      echo "       For details see mcosima --help"
      echo " "
      exit 0;
    fi
    Found=1;
    Nice=$1;
    #echo "Using nice level ${Nice}";
    ;;
  *)
    ;;
  esac

  if [ "${Found}" == "0" ]; then
    if [ "${Source}" == "!@#$" ]; then
      Source=$1;
    else
      echo " "
      echo "Error: Only one source file allowed";
      echo "       For details see mcosima --help"
      echo " "
      help; 
      exit 1;
    fi    
  fi

  shift
done

if [ "${Source}" == "!@#$" ]; then
  echo " "
  echo "Error: You need to give a source file";
  echo "       For details see mcosima --help"
  echo " "
  exit 1;
fi
RUNS=`grep "^Run\ " ${Source} | wc -l`
if [[ ${RUNS} != *1 ]]; then
  echo " "
  echo "Error: You have more than one run in the source file:"
  grep "^Run\ " ${Source}
  echo " "
  exit 1;
fi

if echo ${Threads} | grep "^[0-9]*$" > /tmp/aux
then
  rm /tmp/aux
else
  echo " "
  echo "Error: The value behind parallel threads must be a number";
  echo "       For details see mcosima --help"
  echo " "
  rm /tmp/aux
  exit 1;
fi

if echo ${Max} | grep "^[0-9]*$" > /tmp/aux
then
  rm /tmp/aux
else
  echo " "
  echo "Error: The value behind max threads must be a number";
  echo "       For details see mcosima --help"
  echo " "
  rm /tmp/aux
  exit 1;
fi

# Check if cosima exists
if (`test -f ${MEGAlib}/bin/${Executable}`); then
  echo " "
  echo "ERROR: The ${Executable} executable does not exist. Try to (re-)compile MEGAlib."
  echo " "
  exit 1;
fi


echo " "
echo "Launching mcosima"
echo " "
echo "Executable: ${Executable}"
echo "Number of threads to use: ${Threads}" 
echo "Maximum number of cosima threads on machine: ${Max}" 
echo "Source file: ${Source}" 
echo "gzip'ing the output file: ${Zip}" 
echo "Waiting until all threads have finished: ${Wait}" 



# Search for the next unused sim file with ".pX.*sim" in it
ThreadsID="0"

BaseNames=""
while read line; do
  Base=`echo $line | awk -F ".FileName|.filename|.Filename" '{ print $2 }'`;
  if [ "${Base}" != "" ]; then
    BaseNames="${BaseNames} ${Base}"
  fi
done << EOF
$(grep -i ".FileName" ${Source})
EOF
# The above hack is necessary because "grep ".FileName" ${Source} | while read line; do" would launch a subprocess and BaseNames would not be set...

if [ "${BaseNames}" == "" ]; then
  echo " "
  echo "Error: ${Source} does not contain a file name!"
  echo " "
  exit 1
fi


for Base in ${BaseNames}; do
  while true; do
    ThreadsID=`expr ${ThreadsID} + 1`
    N=`find . -name "${Base}.p${ThreadsID}.*.sim*" | wc -l | sed 's/ //g'`
    #echo "Found: $N of ${Base}.p${ThreadsID}.*sim"
    if [ "${N}" == "0" ]; then
      break;
    fi
  done
done

echo " "

# Start the sims
Pids=( )
for (( i=1; i <= ${Threads}; i+=1 )); do
  mdelay ${Executable} ${Max}
  echo "Launching number ${i}/${Threads}"
  Random=`od -vAn -N4 -tu4 < /dev/urandom`
  Cmd="nice -n ${Nice} ${Executable} -v 0 -s ${Random} -p ${ThreadsID}"
  if [[ "${Zip}" == "yes" ]]; then
    Cmd="${Cmd} -z"
  fi
  Cmd="${Cmd} ${Source}"
  #echo "Starting ${Cmd}"
  #${Cmd} >> Dump.txt
  nohup ${Cmd} > /dev/null &
  Pids[${#Pids[*]}]=$!
  #Pids="$Pids $! "
  if ( [ ${Threads} -gt 1 ] && [ $i -ne ${Threads} ] ); then
    echo "Sleeping for 5 seconds..."
    sleep 5
  fi
done

# Create a concatenation file
ConcatFileName="Bla.sim"

# Extract the base file names from the source file
grep -i ".FileName" ${Source} | while read line; do
  Base=`echo $line | awk -F".FileName|.Filename|.filename" '{ print $2 }' | sed 's/^ *//g'`; 
  echo "Creating concatenation file for simulation \"${Base}\""
  ConcatFileName="${Base}.p${ThreadsID}.sim" 

  FirstFileName="${Base}.p${ThreadsID}.inc1.id1.sim"
  if [[ "${Zip}" == "yes" ]]; then
    FirstFileName="${FirstFileName}.gz"
  fi

  # Wait until the first such file is created
  while ( test ! -f ${FirstFileName} ); do
    sleep 1
    echo "Waiting for the simulation file \"${FirstFileName}\" to appear ..."
  done

  # Wait until the header is written
  if [[ "${Zip}" == "yes" ]]; then
    while [ `gunzip -c ${FirstFileName} 2> /dev/null | wc -l | awk -F" " '{ print $1 }'` -le 100 ]; do
      # Remark: 2> /dev/null suppresses a "unexpected end of file" error message since the file is obviously not yet closed
      sleep 1;
      echo "Waiting for first 100 lines to be written into the simulation file \"${FirstFileName}\" ..."
    done
  else 
    while [ `wc -l ${FirstFileName} | awk -F" " '{ print $1 }'` -le 100 ]; do
      sleep 1;
      echo "Waiting for first 100 lines to be written into the simulation file \"${FirstFileName}\" ..."
    done
  fi

  # Create a concatenation file
  echo "# Concatenation file generated by mcosima" >> ${ConcatFileName}

  if [[ "${Zip}" == "yes" ]]; then
    gunzip -c ${FirstFileName} 2> /dev/null | head -n 100 > /tmp/mcosima.head
    # Remark: 2> /dev/null suppresses a "unexpected end of file" error message since the file is obviously not yet closed
  else 
    head -n 100 ${FirstFileName} > /tmp/mcosima.head
  fi
  while read LINE
  do
    # Keep all information but: #, Seed, TB
    FIRST=${LINE%% *}
    if [ "${FIRST}" == "SE" ]; then
      break
    fi
    if ( [ "${FIRST}" != "#" ] && [ "${FIRST}" != "Seed" ] && [ "${FIRST}" != "TB" ] ); then
      echo "${LINE}" >> ${ConcatFileName}
    fi
  done < /tmp/mcosima.head
  rm /tmp/mcosima.head

  echo " " >> ${ConcatFileName}
    
  for (( i=1; i <= ${Threads}; i+=1 )); do
    echo "IN ${Base}.p${ThreadsID}.inc${i}.id1.sim" >> ${ConcatFileName}
  done
    
  echo "EN" >> ${ConcatFileName}
  echo " " >> ${ConcatFileName}

  # Zip the concatenation file if desired
  if [[ "${Zip}" == "yes" ]]; then
    gzip ${ConcatFileName}
  fi

  echo "Created concatenation file \"${ConcatFileName}\""

  KillFileName="${Base}.p${ThreadsID}.killcosimas.bash"
  rm -f ${KillFileName}
  echo "#! /bin/bash" >> ${KillFileName}
  echo " " >> ${KillFileName}
  for (( p = 0; p < ${#Pids[*]}; p++ )); do
    echo "kill -2 ${Pids[$p]}" >> ${KillFileName}
  done
  echo " " >> ${KillFileName}
  echo "exit" >> ${KillFileName} 
done


# Check if we wait until all threads have finished
if [ "${Wait}" = "yes" ]; then
  echo "Waiting till all sub-processes have finished..."
  wait
fi

exit 0;

